#pragma once

#ifdef WIN32
	#ifdef DEVILINPUT_EXPORTS
		#define DEVILINPUT_API __declspec(dllexport)
	#else
		#define DEVILINPUT_API __declspec(dllimport)
	#endif
#else
	#define DEVILINPUT_API
#endif

#include "ISystem.h"
#include "IWindowMessageHandler.h"

struct IMouse : public IWindowMessageHandler
{
	//! check for a mouse button pressed and held
	virtual bool MouseDown(int p_numButton) = 0;

	//! check for a mouse button pressed only once
	virtual bool MousePressed(int p_numButton) = 0;

	//! check if the mouse button has been released
	virtual bool MouseReleased(int p_numButton) = 0;

	//! force the mouse wheel rotation to a certain value
	virtual void SetMouseWheelRotation(int value) = 0;

	//! set/reset Directinput to exclusive mode
	virtual bool SetExclusive(bool value,void *hwnd=0) = 0;

	//! get mouse X delta (left-right)
	virtual float GetDeltaX() = 0;

	//! get mouse Y delta (up-down)
	virtual float GetDeltaY() = 0;

	//! get mouse Z delta (mouse wheel)
	virtual float GetDeltaZ() = 0;

	//! set mouse inertia
	virtual void SetInertia(float) = 0;

	//! set mouse X screen corrdinate
	virtual void	SetVScreenX(float fX) = 0;

	//! set mouse Y screen corrdinate
	virtual void	SetVScreenY(float fY) = 0;

	//! get mouse X screen corrdinate
	virtual float	GetVScreenX() = 0;

	//! get mouse Y screen corrdinate
	virtual float	GetVScreenY() = 0;
};

struct IKeyboard
{
	
};

/*! InputEvents are generated by input system and broadcasted to all event listeners.
*/
struct SInputEvent
{
	//! Input Event types.
	enum EType
	{
		UNKNOWN,
		KEY_PRESS,
		KEY_RELEASE,
		MOUSE_MOVE,
	};

	//! Type of input event.
	EType type;
	//! Key which was pressed or released, one of the XKeys.
	//! @see KeyCodes
	int key;
	//! Timestamp of the event, (GetTickCount compatable).
	unsigned int timestamp;

	//! Key modifiers enabled at the time of this event.
	//! @see EKeyModifiersFlags
	int moidifiers;

	//! Name of the event key.
	const char *keyname;

	//! For mouse axises.
	float value;

	//SInputEvent()
	//{
	//	moidifiers = XKEY_MOD_NONE;
	//	key = 0;
	//	type = UNKNOWN;
	//	timestamp = 0;
	//	keyname = 0;
	//	value = 0;
	//}
};

//////////////////////////////////////////////////////////////////////////
/* Input event listeners registered to input system and recieve input events when they are generated.
*/
struct IInputEventListener
{
	//! Called every time input event is generated.
	//! @return if return True then broadcasting of this event should be aborted and the rest of input 
	//! listeners should not recieve this event.
	virtual bool OnInputEvent( const SInputEvent &event ) = 0;
};

/*! Interface to the Input system.
The input system give access and initialize Keyboard,Mouse and Joystick SubSystems.
*/ 

////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
/*! Main Input system interface.
*/
struct IInput
{
	//////////////////////////////////////////////////////////////////////////
	//! Register new input events listener.
	//virtual void AddEventListener( IInputEventListener *pListener ) = 0;
	//virtual void RemoveEventListener( IInputEventListener *pListener ) = 0;
	//virtual void EnableEventPosting ( bool bEnable ) = 0;
	virtual bool Init(ISystem *pSystem) = 0;

		//! return the keyboard interface 
	virtual IKeyboard *GetIKeyboard() = 0;

	//! return the mouse interface 
	virtual IMouse * GetIMouse() = 0;
};

//////////////////////////////////////////////////////////////////////////
// DevilInput DLL Exports.
//////////////////////////////////////////////////////////////////////////
typedef IInput* (*PFNCREATEDEVILINPUTINTERFACE)( ISystem *pSystem );

// interface of the DLL
extern "C" 
{
	DEVILINPUT_API IInput* CreateInput( ISystem *pSystem );
}